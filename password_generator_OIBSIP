import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import random
import string

class PasswordGenerator(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Password Generator")
        self.geometry("400x300")

        self.style = ttk.Style(self)
        self.style.configure('TLabel', foreground='blue', font=('Arial', 12))
        self.style.configure('TButton', foreground='black', background='green', font=('Arial', 12))

        self.label_length = ttk.Label(self, text="Password Length:")
        self.entry_length = ttk.Entry(self)

        self.check_letters = ttk.Checkbutton(self, text="Include Letters")
        self.check_numbers = ttk.Checkbutton(self, text="Include Numbers")
        self.check_symbols = ttk.Checkbutton(self, text="Include Symbols")

        self.style.configure('TCheckbutton', font=('Arial', 10))

        self.btn_generate = ttk.Button(self, text="Generate Password", command=self.generate_password, style='TButton')
        self.label_result = ttk.Label(self, text="Generated Password: ")

        self.label_length.pack(pady=10)
        self.entry_length.pack(pady=5)
        self.check_letters.pack(pady=5)
        self.check_numbers.pack(pady=5)
        self.check_symbols.pack(pady=5)
        self.btn_generate.pack(pady=10)
        self.label_result.pack(pady=10)

    def generate_password(self):
        length = self.get_valid_length()

        if length is not None:
            use_letters = self.check_letters.instate(['selected'])
            use_numbers = self.check_numbers.instate(['selected'])
            use_symbols = self.check_symbols.instate(['selected'])

            try:
                password = self.generate_password_string(length, use_letters, use_numbers, use_symbols)
                self.label_result.config(text=f"Generated Password: {password}")

            except ValueError as e:
                messagebox.showerror("Error", f"Invalid input: {e}")

    def get_valid_length(self):
        try:
            length = int(self.entry_length.get())
            
            if length <= 0:
                raise ValueError("Password length must be a positive integer.")

            return length

        except ValueError:
            messagebox.showerror("Error", "Invalid password length. Please enter a positive integer.")
            return None

    def generate_password_string(self, length, use_letters, use_numbers, use_symbols):
        characters = ""
        
        if use_letters:
            characters += string.ascii_letters
        if use_numbers:
            characters += string.digits
        if use_symbols:
            characters += string.punctuation

        if not characters:
            raise ValueError("At least one character type (letters, numbers, symbols) must be selected.")

        password = ''.join(random.choice(characters) for _ in range(length))
        return password

if __name__ == "__main__":
    app = PasswordGenerator()
    app.mainloop()
